[
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#research-questions-and-why-they-are-significant",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#research-questions-and-why-they-are-significant",
    "title": "The Sustainabiliy of Industries",
    "section": "Research Questions and Why they are Significant:",
    "text": "Research Questions and Why they are Significant:\nA few research questions I have included are, - “Do compaines with better esg scores perform better financially?” - “Do companies who improve their esg scores improve their finances?” - “Why do companies have higher esg scores and what are the reasons?” - “How does that change across years?”\nThese questions are relevant/interesting to me because I would like to see the relationship between how well the comapnies perform compared to how sustainable their company is. I believe their is a pattern with how well companies perform compared to their enviornmental scores. This leads to a problem, if comapanies aren’t sustainable and perform well, they will continue these practices."
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#descriptive-statisticsgraphs-with-questions",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#descriptive-statisticsgraphs-with-questions",
    "title": "The Sustainabiliy of Industries",
    "section": "Descriptive Statistics/Graphs with Questions",
    "text": "Descriptive Statistics/Graphs with Questions"
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#exploratory-data-analysis-with-questions-answered",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#exploratory-data-analysis-with-questions-answered",
    "title": "The Sustainabiliy of Industries",
    "section": "Exploratory Data Analysis with Questions Answered",
    "text": "Exploratory Data Analysis with Questions Answered\n\ntop_5_industries = all_stock_esg['Industry'].value_counts().nlargest(5).index\n\n\nfiltered_df = all_stock_esg[all_stock_esg['Industry'].isin(top_5_industries)]\n\n\nsns.boxplot(data = filtered_df,\n           y = 'Industry',\n           x = 'High',\n           hue = 'Year_x')\n\n\n\n\n\n\n\n\n\nsns.boxplot(data = filtered_df,\n           y = 'Industry',\n           x = 'Total_ESG',\n           hue = 'Year_x')\n\n\n\n\n\n\n\n\n\nsns.boxplot(data = stock,\n           y = 'High',\n           x = 'Low',\n           hue = 'Date')\n\n\n\n\n\n\n\n\n\nDo compaines with better esg scores perform better financially?\n\nFrom the two box plots above it compared industry’s highs and their esg scores. When an industry has a higher ESG score it’s high is generally lower comapred to the other industrys. For example major banks industry is low with their highs and their ESG scores are higher then the other industrys. - Do companies who improve their esg scores improve their finances?\nThere are pros and cons into making your company more sustainable. It may attract more customers with sustainable values and gain more clients, but it also could hurt your company in profits. There is evidence for both correlations."
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#exploring-data-from-2024-2025-and-questions",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#exploring-data-from-2024-2025-and-questions",
    "title": "The Sustainabiliy of Industries",
    "section": "Exploring Data from 2024-2025 and Questions",
    "text": "Exploring Data from 2024-2025 and Questions\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas\n\n\nsns.countplot(data = delivery_dat,\n              x = 'Environmental',\n              hue = 'Year')\n\n\n\n\n\n\n\n\n\nsns.boxplot(data = all_esg,\n           y = 'Sector',\n           x = 'Total_ESG',\n           hue = 'Year')\n\n\n\n\n\n\n\n\n\nenergy = all_esg['Sector'] == \"Energy\"\nenergy = all_esg[energy]\nsns.boxplot(data = energy,\n           y = 'Industry',\n           x = 'Total_ESG',\n           hue = 'Year')\n\n\n\n\n\n\n\n\n\n\nWhy do companies have higher esg scores and what are the reasons?\n\nSome companies have a higher ESG score then others simplying depending on the industry. Some industries produce a higher carbon footrpint which lowers the score in the environmental section. Also other industrys can be more damaging to the environment when producing their products. Some companies have different values in how they operate which can impact the score as well. - How does that change across years?\nIn the graph above it shows the ESG rating decreased from 2024-2025 slightly. There could be more regulations added, change in government, and change in clients where this could happen."
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#significance-of-the-project",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#significance-of-the-project",
    "title": "The Sustainabiliy of Industries",
    "section": "Significance of the Project:",
    "text": "Significance of the Project:\n\nExplain its implications for real-world applications, business strategies, or public policy.\n\nThe significance of the project is to understand how companies can change their ESG scores and how it influences their performance. The project collected controversy, esg ratings, and stock data from yahoo finance. After collecting this data we can compare it. There is a neutral conclusion when comparing the two. Some comapnies who have a high all time high in the stocks can also have a high ESG rating. I believe it is how the company is set up and what it’s values are, and the type of client they attract. Higher ESG scores can also lead to performing better long term. There are also conclusions made that increasing the ESG rating can be hard depending where the company is located and it may not be easy to get into a higher ESG rating.\n\nimport pandas as pd\nimport numpy as np\n\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\nurl_2025 = \"https://bcdanl.github.io/data/esg_proj_2025.csv\"\nesg_proj_2025 = pd.read_csv(url_2025)\nesg_2025_dropd = esg_proj_2025.drop_duplicates(subset = [\"Name\"])\nesg_2024_2025 = pd.merge(esg_2025_dropd,esg_proj_2024_data, on = 'Name', how = 'inner')"
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#imported-data-from-spyder",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#imported-data-from-spyder",
    "title": "The Sustainabiliy of Industries",
    "section": "Imported Data from Spyder",
    "text": "Imported Data from Spyder\n\ndf1 = pd.read_csv('data_0_18.csv')\ndf2 = pd.read_csv('data_18_19.csv')\ndf3 = pd.read_csv('data_19_56.csv')\ndf4 = pd.read_csv('data_56_57.csv')\ndf5 = pd.read_csv('data_57_94.csv')\ndf6 = pd.read_csv('data_94_95.csv')\ndf7 = pd.read_csv('data_95_112.csv')\ndf8 = pd.read_csv('data_112_114.csv')\ndf9 = pd.read_csv('data_114_346.csv')\ndf10 = pd.read_csv('data_346_347.csv')\ndf11 = pd.read_csv('data_347_499.csv')\ndf12 = pd.read_csv('data_499_551.csv')\ndf13 = pd.read_csv('data_551_567.csv')\ndf14 = pd.read_csv('data_567_589.csv')\ndf15 = pd.read_csv('data_589_590.csv')\ndf16 = pd.read_csv('data_590_616.csv')\ndf17 = pd.read_csv('data_616_617.csv')\ndf18 = pd.read_csv('data_617_625.csv')\n\n\ncont_1 = df1['Controversy'].to_list()\ncont_2 = df2['Controversy'].to_list()\ncont_3 = df3['Controversy'].to_list()\ncont_4 = df4['Controversy'].to_list()\ncont_5 = df5['Controversy'].to_list()\ncont_6 = df6['Controversy'].to_list()\ncont_7 = df7['Controversy'].to_list()\ncont_8 = df8['Controversy'].to_list()\ncont_19 = cont_8.append(np.nan)\n\ncont_9 = df9['Controversy'].to_list()\ncont_10 = df10['Controversy'].to_list()\ncont_11 = df11['Controversy'].to_list()\ncont_12 = df12['Controversy'].to_list()\ncont_13 = df13['Controversy'].to_list()\ncont_14 = df14['Controversy'].to_list()\ncont_15 = df15['Controversy'].to_list()\ncont_16 = df16['Controversy'].to_list()\ncont_17 = df17['Controversy'].to_list()\ncont_18 = df18['Controversy'].to_list()\n\n\ncont = cont_1 + cont_2 + cont_3 + cont_4 + cont_5 + cont_6 + cont_7 + cont_8 + cont_9 + cont_10 + cont_11 + cont_12 + cont_13 + cont_14 + cont_15 + cont_16 + cont_17 + cont_18  #+ cont_19\n\n\n\nesg_2024_2025[\"Controversy\"] = cont\n\n\ndf1 = pd.read_csv('dat0_187.csv')\ndf2 = pd.read_csv('dat188_250.csv')\ndf3 = pd.read_csv('dat250_338.csv')\ndf4 = pd.read_csv('dat338_401.csv')\ndf5 = pd.read_csv('dat401_405.csv')\ndf6 = pd.read_csv('dat405_425.csv')\ndf7 = pd.read_csv('dat425_512.csv')\ndf8 = pd.read_csv('dat512_558.csv')\ndf9 = pd.read_csv('dat558_625.csv')\n\nesg_1 = df1['Total_ESG'].to_list()\nesg_2 = df2['Total_ESG'].to_list()\nesg_3 = df3['Total_ESG'].to_list()\nesg_4 = df4['Total_ESG'].to_list()\nesg_5 = df5['Total_ESG'].to_list()\nesg_6 = df6['Total_ESG'].to_list()\nesg_7 = df7['Total_ESG'].to_list()\nesg_8 = df8['Total_ESG'].to_list()\nesg_9 = df9['Total_ESG'].to_list()\n\nesg = esg_1 + esg_2 + esg_3 + esg_4 + esg_5 + esg_6 + esg_7 + esg_8 + esg_9\n\nesg_2024_2025[\"Total_ESG\"] = esg\n\n\ndfA = pd.read_csv('dat0_29.csv')\ndfB = pd.read_csv('dat29_30.csv')\ndfC = pd.read_csv('dat30_78.csv')\ndfD = pd.read_csv('dat78_108.csv')\ndfE = pd.read_csv('dat108_405.csv')\ndfF = pd.read_csv('dat405_432.csv')\ndfG = pd.read_csv('dat432_591.csv')\ndfH = pd.read_csv('dat591_625.csv')\n\nstock_A = dfA['Stock'].to_list()\nstock_B = dfB['Stock'].to_list()\nstock_C = dfC['Stock'].to_list()\nstock_D = dfD['Stock'].to_list()\nstock_E = dfE['Stock'].to_list()\nstock_F = dfF['Stock'].to_list()\nstock_G = dfG['Stock'].to_list()\nstock_H = dfH['Stock'].to_list()\n\nstock = stock_A + stock_B + stock_C + stock_D + stock_E + stock_F + stock_G + stock_H\n\nesg_2024_2025[\"Total_STOCK\"] = stock\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-2-3ecc0a4c5eda&gt; in &lt;cell line: 0&gt;()\n----&gt; 1 dfA = pd.read_csv('dat0_29.csv')\n      2 dfB = pd.read_csv('dat29_30.csv')\n      3 dfC = pd.read_csv('dat30_78.csv')\n      4 dfD = pd.read_csv('dat78_108.csv')\n      5 dfE = pd.read_csv('dat108_405.csv')\n\nNameError: name 'pd' is not defined"
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#delivery-data",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#delivery-data",
    "title": "The Sustainabiliy of Industries",
    "section": "Delivery Data",
    "text": "Delivery Data\n\nesg_2024_2025[\"Total_ESG\"] = esg\nesg_2024_2025[\"Controversy\"] = cont\ndelivery_2025 = esg_2024_2025[esg_2024_2025[\"Industry_x\"] == \"Air Freight/Delivery Services\"]\ndelivery_2025\n\n\n  \n    \n\n\n\n\n\n\nYear_x\nSymbol_x\nName\nSector_x\nIndustry_x\nCountry_x\nMarket_Cap_x\nIPO_Year_x\nYear_y\nSymbol_y\n...\nIndustry_y\nCountry_y\nMarket_Cap_y\nIPO_Year_y\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\nTotal_STOCK\n\n\n\n\n2\n2025\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n7.325392e+09\nNaN\n2024\nAAL\n...\nAir Freight/Delivery Services\nUnited States\n9088024606\nNaN\n23.8\n9.9\n11.6\n4.8\n2.0\nMar 31, 2025 10.41 10.68 10.06 10.55 10.55 66,...\n\n\n161\n2025\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.981115e+10\nNaN\n2024\nDAL\n...\nAir Freight/Delivery Services\nUnited States\n32213989167\nNaN\n30.5\n9.9\n14.6\n5.8\n2.0\nMar 31, 2025 42.00 44.01 40.78 43.60 43.60 18,...\n\n\n222\n2025\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n5.844297e+10\nNaN\n2024\nFDX\n...\nAir Freight/Delivery Services\nUnited States\n65418106580\nNaN\n19.1\n5.7\n8.4\n5.6\n2.0\nMar 31, 2025 239.81 245.44 239.25 243.78 243.7...\n\n\n349\n2025\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.010899e+10\nNaN\n2024\nLUV\n...\nAir Freight/Delivery Services\nUnited States\n16127842057\nNaN\n28.6\n11.0\n13.7\n5.9\n2.0\nMar 31, 2025 32.90 33.89 32.77 33.58 33.58 10,...\n\n\n568\n2025\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.406928e+10\nNaN\n2024\nUAL\n...\nAir Freight/Delivery Services\nUnited States\n17373973294\nNaN\n27.0\n10.8\n12.8\n5.0\n2.0\nMar 31, 2025 66.97 69.72 64.11 69.05 69.05 10,...\n\n\n\n\n5 rows × 21 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ndelivery_2025 = (\n    delivery_2025\n    .drop(columns=['Year_y','Symbol_y','Industry_y','Country_y','Market_Cap_y','IPO_Year_y','Sector_y'])\n)\ndelivery_2025\n\n\n  \n    \n\n\n\n\n\n\nYear_x\nSymbol_x\nName\nSector_x\nIndustry_x\nCountry_x\nMarket_Cap_x\nIPO_Year_x\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\nTotal_STOCK\n\n\n\n\n2\n2025\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n7.325392e+09\nNaN\n23.8\n9.9\n11.6\n4.8\n2.0\nMar 31, 2025 10.41 10.68 10.06 10.55 10.55 66,...\n\n\n161\n2025\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.981115e+10\nNaN\n30.5\n9.9\n14.6\n5.8\n2.0\nMar 31, 2025 42.00 44.01 40.78 43.60 43.60 18,...\n\n\n222\n2025\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n5.844297e+10\nNaN\n19.1\n5.7\n8.4\n5.6\n2.0\nMar 31, 2025 239.81 245.44 239.25 243.78 243.7...\n\n\n349\n2025\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.010899e+10\nNaN\n28.6\n11.0\n13.7\n5.9\n2.0\nMar 31, 2025 32.90 33.89 32.77 33.58 33.58 10,...\n\n\n568\n2025\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.406928e+10\nNaN\n27.0\n10.8\n12.8\n5.0\n2.0\nMar 31, 2025 66.97 69.72 64.11 69.05 69.05 10,...\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ndelivery_2025.columns = ['Year','Symbol','Name','Sector','Industry','Country','Market_Cap', 'IPO_Year', 'Total_ESG','Environmental','Social',   'Governance',   'Controversy',  'Total_STOCK']\ndelivery_2025\n\n\n\n  \n    \n\n\n\n\n\n\nYear\nSymbol\nName\nSector\nIndustry\nCountry\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\nTotal_STOCK\n\n\n\n\n2\n2025\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n7.325392e+09\nNaN\n23.8\n9.9\n11.6\n4.8\n2.0\nMar 31, 2025 10.41 10.68 10.06 10.55 10.55 66,...\n\n\n161\n2025\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.981115e+10\nNaN\n30.5\n9.9\n14.6\n5.8\n2.0\nMar 31, 2025 42.00 44.01 40.78 43.60 43.60 18,...\n\n\n222\n2025\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n5.844297e+10\nNaN\n19.1\n5.7\n8.4\n5.6\n2.0\nMar 31, 2025 239.81 245.44 239.25 243.78 243.7...\n\n\n349\n2025\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.010899e+10\nNaN\n28.6\n11.0\n13.7\n5.9\n2.0\nMar 31, 2025 32.90 33.89 32.77 33.58 33.58 10,...\n\n\n568\n2025\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.406928e+10\nNaN\n27.0\n10.8\n12.8\n5.0\n2.0\nMar 31, 2025 66.97 69.72 64.11 69.05 69.05 10,...\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ndelivery_2024 = esg_proj_2024_data[esg_proj_2024_data[\"Industry\"] == \"Air Freight/Delivery Services\"]\ndelivery_2024\n\n\n  \n    \n\n\n\n\n\n\nYear\nSymbol\nName\nSector\nIndustry\nCountry\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\n\n\n\n\n2\n2024\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n9088024606\nNaN\n26.4\n9.9\n11.6\n4.8\n2.0\n\n\n161\n2024\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n32213989167\nNaN\n30.3\n9.9\n14.6\n5.8\n2.0\n\n\n222\n2024\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n65418106580\nNaN\n19.7\n5.7\n8.4\n5.6\n2.0\n\n\n349\n2024\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n16127842057\nNaN\n30.7\n11.0\n13.7\n5.9\n2.0\n\n\n568\n2024\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n17373973294\nNaN\n28.6\n10.8\n12.8\n5.0\n2.0\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ndelivery_dat = pd.merge(delivery_2024, delivery_2025, on = [\"Year\", \"Symbol\", \"Name\", \"Sector\", \"Industry\", \"Country\", \"Market_Cap\", \"IPO_Year\", \"Total_ESG\", \"Environmental\", \"Social\", \"Governance\", \"Controversy\"], how = \"outer\")\ndelivery_dat\n\n\n  \n    \n\n\n\n\n\n\nYear\nSymbol\nName\nSector\nIndustry\nCountry\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\nTotal_STOCK\n\n\n\n\n0\n2024\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n9.088025e+09\nNaN\n26.4\n9.9\n11.6\n4.8\n2.0\nNaN\n\n\n1\n2024\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n3.221399e+10\nNaN\n30.3\n9.9\n14.6\n5.8\n2.0\nNaN\n\n\n2\n2024\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n6.541811e+10\nNaN\n19.7\n5.7\n8.4\n5.6\n2.0\nNaN\n\n\n3\n2024\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n1.612784e+10\nNaN\n30.7\n11.0\n13.7\n5.9\n2.0\nNaN\n\n\n4\n2024\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n1.737397e+10\nNaN\n28.6\n10.8\n12.8\n5.0\n2.0\nNaN\n\n\n5\n2025\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n7.325392e+09\nNaN\n23.8\n9.9\n11.6\n4.8\n2.0\nMar 31, 2025 10.41 10.68 10.06 10.55 10.55 66,...\n\n\n6\n2025\nDAL\nDelta Air Lines Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.981115e+10\nNaN\n30.5\n9.9\n14.6\n5.8\n2.0\nMar 31, 2025 42.00 44.01 40.78 43.60 43.60 18,...\n\n\n7\n2025\nFDX\nFedEx Corporation Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n5.844297e+10\nNaN\n19.1\n5.7\n8.4\n5.6\n2.0\nMar 31, 2025 239.81 245.44 239.25 243.78 243.7...\n\n\n8\n2025\nLUV\nSouthwest Airlines Company Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.010899e+10\nNaN\n28.6\n11.0\n13.7\n5.9\n2.0\nMar 31, 2025 32.90 33.89 32.77 33.58 33.58 10,...\n\n\n9\n2025\nUAL\nUnited Airlines Holdings Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n2.406928e+10\nNaN\n27.0\n10.8\n12.8\n5.0\n2.0\nMar 31, 2025 66.97 69.72 64.11 69.05 69.05 10,..."
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#new-esg_all-data",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#new-esg_all-data",
    "title": "The Sustainabiliy of Industries",
    "section": "New ESG_all Data",
    "text": "New ESG_all Data\n\nesg_2025 = esg_2024_2025.drop(columns = [\"Year_y\", \"Symbol_y\", \"Sector_y\", \"Industry_y\", \"Country_y\", \"Market_Cap_y\", \"IPO_Year_y\",\"Total_STOCK\"])\n\n\n\nesg_2025.columns = [\"Year\", \"Symbol\", \"Name\", \"Sector\", \"Industry\", \"Country\", \"Market_Cap\", \"IPO_Year\", \"Total_ESG\", \"Environmental\", \"Social\", \"Governance\", \"Controversy\"]\n\n\n\nall_esg = pd.merge(esg_proj_2024_data, esg_2025, on = [\"Year\", \"Symbol\", \"Name\", \"Sector\", \"Industry\", \"Country\", \"Market_Cap\", \"IPO_Year\", \"Total_ESG\", \"Environmental\", \"Social\", \"Governance\", \"Controversy\"], how = \"outer\")\nall_esg\n\n\n  \n    \n\n\n\n\n\n\nYear\nSymbol\nName\nSector\nIndustry\nCountry\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\n\n\n\n\n0\n2024\nA\nAgilent Technologies Inc. Common Stock\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n4.036543e+10\n1999.0\n13.6\n1.1\n6.4\n6.1\n2.0\n\n\n1\n2024\nAA\nAlcoa Corporation Common Stock\nIndustrials\nAluminum\nUnited States\n6.622136e+09\n2016.0\n24.0\n13.8\n5.9\n4.3\n3.0\n\n\n2\n2024\nAAL\nAmerican Airlines Group Inc. Common Stock\nConsumer Discretionary\nAir Freight/Delivery Services\nUnited States\n9.088025e+09\nNaN\n26.4\n9.9\n11.6\n4.8\n2.0\n\n\n3\n2024\nAAP\nAdvance Auto Parts Inc.\nConsumer Discretionary\nAuto & Home Supply Stores\nUnited States\n4.474665e+09\nNaN\n11.5\n0.1\n8.3\n3.1\n2.0\n\n\n4\n2024\nAAPL\nApple Inc. Common Stock\nTechnology\nComputer Manufacturing\nUnited States\n2.614310e+12\n1980.0\n17.2\n0.5\n7.4\n9.4\n3.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1245\n2025\nXYL\nXylem Inc. Common Stock New\nIndustrials\nFluid Controls\nUnited States\n2.965650e+10\n2011.0\n22.9\n4.3\n8.7\n5.2\n1.0\n\n\n1246\n2025\nYUM\nYum! Brands Inc.\nConsumer Discretionary\nRestaurants\nUnited States\n4.400042e+10\nNaN\n20.5\n4.5\n11.4\n4.1\n2.0\n\n\n1247\n2025\nZ\nZillow Group Inc. Class C Capital Stock\nConsumer Discretionary\nBusiness Services\nUnited States\n1.706396e+10\nNaN\n17.8\n1.2\n11.5\n9.5\n2.0\n\n\n1248\n2025\nZBH\nZimmer Biomet Holdings Inc. Common Stock\nHealth Care\nIndustrial Specialties\nUnited States\n2.232493e+10\nNaN\n26.2\n3.6\n14.5\n7.9\n2.0\n\n\n1249\n2025\nZTS\nZoetis Inc. Class A Common Stock\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.389462e+10\n2013.0\n15.1\n3.2\n6.8\n8.7\n2.0\n\n\n\n\n1250 rows × 13 columns"
  },
  {
    "objectID": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#stock-2023-data",
    "href": "danl_210_project/danl_210_malene_comeau_stock_ESG.html#stock-2023-data",
    "title": "The Sustainabiliy of Industries",
    "section": "Stock 2023 data",
    "text": "Stock 2023 data\n\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023 = pd.read_csv(url)\nurl = \"https://bcdanl.github.io/data/stock_history_2023.csv\"\nstock_history_2023\n\n\n  \n    \n\n\n\n\n\n\nDate\nYear\nSymbol\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\n\n\n\n\n0\n2023-12-29\n2023\nA\n138.587233\n139.215036\n137.879691\n138.547363\n1014400\n0.236\n0.0\n\n\n1\n2023-12-28\n2023\nA\n139.815657\n140.084270\n138.930245\n139.049637\n892600\n0.000\n0.0\n\n\n2\n2023-12-27\n2023\nA\n139.059578\n139.437624\n138.363189\n139.099380\n1182300\n0.000\n0.0\n\n\n3\n2023-12-26\n2023\nA\n138.591994\n139.746018\n138.373126\n139.089416\n948400\n0.000\n0.0\n\n\n4\n2023-12-22\n2023\nA\n138.890449\n139.636584\n138.074668\n138.850662\n1204100\n0.000\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n157745\n2023-01-09\n2023\nZTS\n146.205080\n146.715330\n144.242596\n144.301468\n1700500\n0.000\n0.0\n\n\n157746\n2023-01-06\n2023\nZTS\n143.840283\n145.832203\n138.865393\n144.870590\n1761200\n0.000\n0.0\n\n\n157747\n2023-01-05\n2023\nZTS\n144.586064\n145.400482\n141.563836\n142.721695\n1560900\n0.000\n0.0\n\n\n157748\n2023-01-04\n2023\nZTS\n146.224720\n147.981137\n145.184606\n146.165848\n1796100\n0.000\n0.0\n\n\n157749\n2023-01-03\n2023\nZTS\n145.871459\n145.999010\n142.486177\n144.095413\n1840600\n0.000\n0.0\n\n\n\n\n157750 rows × 10 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nimport pandas as pd\n\n\nstock = pd.DataFrame(stock)\nstock[0]\nstock.columns = ['Info']\nstock[['Date', 'Open', 'High', 'Low', 'Close', 'Adj_close']] = stock['Info'].str.extract(r'(\\w+ \\d+, \\d+) (\\d+\\.\\d+) (\\d+\\.\\d+) (\\d+\\.\\d+) (\\d+\\.\\d+) (\\d+\\.\\d+)')\nstock\n\n\n  \n    \n\n\n\n\n\n\nInfo\nDate\nOpen\nHigh\nLow\nClose\nAdj_close\n\n\n\n\n0\nMar 31, 2025 116.36 117.73 113.76 116.98 116.7...\nMar 31, 2025\n116.36\n117.73\n113.76\n116.98\n116.73\n\n\n1\nMar 31, 2025 29.74 30.63 28.80 30.50 30.50 4,9...\nMar 31, 2025\n29.74\n30.63\n28.80\n30.50\n30.50\n\n\n2\nMar 31, 2025 10.41 10.68 10.06 10.55 10.55 66,...\nMar 31, 2025\n10.41\n10.68\n10.06\n10.55\n10.55\n\n\n3\nMar 31, 2025 38.36 39.65 38.25 39.21 38.91 2,3...\nMar 31, 2025\n38.36\n39.65\n38.25\n39.21\n38.91\n\n\n4\nMar 31, 2025 217.01 225.62 216.23 222.13 222.1...\nMar 31, 2025\n217.01\n225.62\n216.23\n222.13\n222.13\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n620\nMar 31, 2025 118.64 120.11 116.52 119.46 119.4...\nMar 31, 2025\n118.64\n120.11\n116.52\n119.46\n119.46\n\n\n621\nMar 31, 2025 154.18 158.14 153.61 157.36 157.3...\nMar 31, 2025\n154.18\n158.14\n153.61\n157.36\n157.36\n\n\n622\nMar 31, 2025 67.54 68.90 66.13 68.56 68.56 2,3...\nMar 31, 2025\n67.54\n68.90\n66.13\n68.56\n68.56\n\n\n623\nMar 31, 2025 111.37 113.64 111.37 113.18 113.1...\nMar 31, 2025\n111.37\n113.64\n111.37\n113.18\n113.18\n\n\n624\nMar 31, 2025 163.12 164.90 161.58 164.65 164.1...\nMar 31, 2025\n163.12\n164.90\n161.58\n164.65\n164.10\n\n\n\n\n625 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nall_stock_esg = pd.merge(stock_history_2023, all_esg, on = ['Symbol'])\nall_stock_esg\n\n\n  \n    \n\n\n\n\n\n\nDate\nYear_x\nSymbol\nOpen\nHigh\nLow\nClose\nVolume\nDividend\nStock_Splits\n...\nSector\nIndustry\nCountry\nMarket_Cap\nIPO_Year\nTotal_ESG\nEnvironmental\nSocial\nGovernance\nControversy\n\n\n\n\n0\n2023-12-29\n2023\nA\n138.587233\n139.215036\n137.879691\n138.547363\n1014400\n0.236\n0.0\n...\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n4.036543e+10\n1999.0\n13.6\n1.1\n6.4\n6.1\n2.0\n\n\n1\n2023-12-29\n2023\nA\n138.587233\n139.215036\n137.879691\n138.547363\n1014400\n0.236\n0.0\n...\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n3.391867e+10\n1999.0\n10.1\n1.1\n6.4\n6.1\n1.0\n\n\n2\n2023-12-28\n2023\nA\n139.815657\n140.084270\n138.930245\n139.049637\n892600\n0.000\n0.0\n...\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n4.036543e+10\n1999.0\n13.6\n1.1\n6.4\n6.1\n2.0\n\n\n3\n2023-12-28\n2023\nA\n139.815657\n140.084270\n138.930245\n139.049637\n892600\n0.000\n0.0\n...\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n3.391867e+10\n1999.0\n10.1\n1.1\n6.4\n6.1\n1.0\n\n\n4\n2023-12-27\n2023\nA\n139.059578\n139.437624\n138.363189\n139.099380\n1182300\n0.000\n0.0\n...\nIndustrials\nBiotechnology: Laboratory Analytical Instruments\nUnited States\n4.036543e+10\n1999.0\n13.6\n1.1\n6.4\n6.1\n2.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n312495\n2023-01-05\n2023\nZTS\n144.586064\n145.400482\n141.563836\n142.721695\n1560900\n0.000\n0.0\n...\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.389462e+10\n2013.0\n15.1\n3.2\n6.8\n8.7\n2.0\n\n\n312496\n2023-01-04\n2023\nZTS\n146.224720\n147.981137\n145.184606\n146.165848\n1796100\n0.000\n0.0\n...\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.253531e+10\n2013.0\n18.8\n3.2\n6.8\n8.7\n2.0\n\n\n312497\n2023-01-04\n2023\nZTS\n146.224720\n147.981137\n145.184606\n146.165848\n1796100\n0.000\n0.0\n...\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.389462e+10\n2013.0\n15.1\n3.2\n6.8\n8.7\n2.0\n\n\n312498\n2023-01-03\n2023\nZTS\n145.871459\n145.999010\n142.486177\n144.095413\n1840600\n0.000\n0.0\n...\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.253531e+10\n2013.0\n18.8\n3.2\n6.8\n8.7\n2.0\n\n\n312499\n2023-01-03\n2023\nZTS\n145.871459\n145.999010\n142.486177\n144.095413\n1840600\n0.000\n0.0\n...\nHealth Care\nBiotechnology: Pharmaceutical Preparations\nUnited States\n7.389462e+10\n2013.0\n15.1\n3.2\n6.8\n8.7\n2.0\n\n\n\n\n312500 rows × 22 columns"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/spotify/danl_210_spotify (2).html",
    "href": "posts/spotify/danl_210_spotify (2).html",
    "title": "Spotify",
    "section": "",
    "text": "import pandas as pd\n# Below is for an interactive display of DataFrame in Colab\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\nWarning: total number of rows (198005) exceeds max_rows (20000). Falling back to pandas display.\n\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nWrite a blog post about your favorite artist(s) in the spotify DataFrame using Jupyter Notebook, and add it to your online blog. In your blog post, utilize counting, sorting, indexing, and filtering methods.\n\n(\nspotify\n  [['playlist_name', 'artist_name', 'track_name', 'album_name']]\n  .set_index('artist_name')\n  .count()\n\n)\n\n## My favorite songs in this data set fall under the playlist_name of Throwbacks. Some of my favoirte artists are Briteny Spears, Beyonce, and Justin Timberlake.\n\n\n\n\n\n\n\n\n0\n\n\n\n\nplaylist_name\n198005\n\n\ntrack_name\n198005\n\n\nalbum_name\n198005\n\n\n\n\ndtype: int64\n\n\n\n# Add the following section to your Spotify blog:\nCode - Use pandas to identify the ten artists with the most tracks. - Use seaborn to plot the distribution of pos for each of those artists. - Description: Write 2–3 sentences explaining how the pos distribution differs across these top ten artists.\n\ntop_artists = spotify['artist_name'].value_counts().head(10)\ntop_artists\n\n\n\n\n\n\n\n\ncount\n\n\nartist_name\n\n\n\n\n\nDrake\n2715\n\n\nKanye West\n1065\n\n\nKendrick Lamar\n1035\n\n\nRihanna\n915\n\n\nThe Weeknd\n913\n\n\nFuture\n784\n\n\nEminem\n760\n\n\nLil Uzi Vert\n728\n\n\nEd Sheeran\n719\n\n\nThe Chainsmokers\n642\n\n\n\n\ndtype: int64\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ntop_artists = spotify['artist_name'].value_counts().head(10).index\nfiltered_df = spotify[spotify['artist_name'].isin(top_artists)]\n\nplt.figure(figsize=(12, 8))\nsns.histplot(data=filtered_df, x='artist_name', y='pos')\nplt.title('Distribution of Pos for Artists')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThis pos distribution shows a difference between the 10 artists. When the blue at the bottom is darkest and slowly increases lighter, that means the artist has the most tracks. As you can see, Drake’s column starts off very dark at the bottom indicating he has the mosts trakcs of the artists. You can see Kendrick and Kanye start off with royal blue at the bottom, those are the next two artists with the most tracks."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html",
    "href": "posts/pythonbasics/danl_210_python_basic.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\nPython Basics we discussed in Lecture 4 and Lecture 5, and in Classwork 4. During lectures 4 and 5 we discussed some basic codes for Python. Some examples of what we learned were integers, floats, strings and slicing methods, how to use different brackets, and if statements. In the classwork we incorperated what we learned into examples. Wse used the slicing methods for question three and loops and while for questions five and six.\n\nprint('Hello, World!')\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html#what-is-python",
    "href": "posts/pythonbasics/danl_210_python_basic.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\nPython Basics we discussed in Lecture 4 and Lecture 5, and in Classwork 4. During lectures 4 and 5 we discussed some basic codes for Python. Some examples of what we learned were integers, floats, strings and slicing methods, how to use different brackets, and if statements. In the classwork we incorperated what we learned into examples. Wse used the slicing methods for question three and loops and while for questions five and six.\n\nprint('Hello, World!')"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html#variables-and-data-types",
    "href": "posts/pythonbasics/danl_210_python_basic.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html#control-structures",
    "href": "posts/pythonbasics/danl_210_python_basic.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html#functions",
    "href": "posts/pythonbasics/danl_210_python_basic.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()"
  },
  {
    "objectID": "posts/pythonbasics/danl_210_python_basic.html#lists-and-dictionaries",
    "href": "posts/pythonbasics/danl_210_python_basic.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/holiday movies/danl_210_holiday (2).html",
    "href": "posts/holiday movies/danl_210_holiday (2).html",
    "title": "Holiday Movies",
    "section": "",
    "text": "import pandas as pd\n# Below is for an interactive display of DataFrame in Colab\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movies\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\n\n\n2\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\n\n\n3\ntt0021268\nmovie\nHoliday of St. Jorgen\nholiday of st jorgen\n1930\n83.0\n7.4\n256\n\n\n4\ntt0021377\nmovie\nSin Takes a Holiday\nsin takes a holiday\n1930\n81.0\n6.1\n740\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2260\ntt9747440\ntvMovie\nA Christmas Love Story\na christmas love story\n2019\n84.0\n6.9\n1652\n\n\n2261\ntt9747450\ntvMovie\nHoliday for Heroes\nholiday for heroes\n2019\n81.0\n7.0\n1655\n\n\n2262\ntt9802890\ntvMovie\nChristmas Jars\nchristmas jars\n2019\n93.0\n7.3\n914\n\n\n2263\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\n\n\n2264\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\n\n\n\n\n2265 rows × 8 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\nUsing the provided DataFrames, write a blog post about Christmas movies in a Jupyter Notebook and publish it on your online blog. In your analysis, make use of counting, sorting, indexing, filtering, and joining techniques.\n\n(\nholiday_movies\n  [['primary_title', 'year', 'average_rating']]\n  .set_index('primary_title')\n  .query(\"year &gt; 2000\")\n  .value_counts()\n\n)\n\n# I narrowed down the holiday movies to the year I was born, and grew up watching these movies. I found the rating for all of the movies from 2005-2023 as well as the names of all of them.\n\n\n\n\n\n\n\n\n\ncount\n\n\nyear\naverage_rating\n\n\n\n\n\n2021\n6.3\n15\n\n\n6.5\n13\n\n\n2020\n5.8\n13\n\n\n2022\n6.2\n12\n\n\n2021\n5.5\n12\n\n\n...\n...\n...\n\n\n2023\n8.2\n1\n\n\n8.0\n1\n\n\n7.6\n1\n\n\n7.0\n1\n\n\n2001\n6.6\n1\n\n\n\n\n770 rows × 1 columns\ndtype: int64\n\n\n\nimport pandas as pd\n# Below is for an interactive display of DataFrame in Colab\nfrom google.colab import data_table\ndata_table.enable_dataframe_formatter()\nholiday_movie_genres = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movie_genres.csv\")\nholiday_movie_genres\n\n\n  \n    \n\n\n\n\n\n\ntconst\ngenres\n\n\n\n\n0\ntt0020356\nComedy\n\n\n1\ntt0020823\nDrama\n\n\n2\ntt0020823\nRomance\n\n\n3\ntt0020985\nComedy\n\n\n4\ntt0020985\nDrama\n\n\n...\n...\n...\n\n\n4526\ntt9815084\nFamily\n\n\n4527\ntt9815084\nRomance\n\n\n4528\ntt9892854\nComedy\n\n\n4529\ntt9892854\nDrama\n\n\n4530\ntt9892854\nRomance\n\n\n\n\n4531 rows × 2 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nAdd the following section to your Holiday Movie blog:\nCode - Use pandas to select the five genres with the highest film counts. - Use numpy to add a new variable, log of num_votes. - Use seaborn to plot the relationship between log of num_votes and average_rating, grouping by genre and coloring or faceting by title_type. - Description: Write 2–3 sentences describing how the log of num_votes vs. average_rating relationship varies among the top five genres and between different title_types.\n\nimport pandas as pd\nimport numpy as np\n\n\nholiday_movies = pd.read_csv(\"https://bcdanl.github.io/data/holiday_movies.csv\")\nholiday_movies\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n55\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n242\n\n\n2\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n638\n\n\n3\ntt0021268\nmovie\nHoliday of St. Jorgen\nholiday of st jorgen\n1930\n83.0\n7.4\n256\n\n\n4\ntt0021377\nmovie\nSin Takes a Holiday\nsin takes a holiday\n1930\n81.0\n6.1\n740\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2260\ntt9747440\ntvMovie\nA Christmas Love Story\na christmas love story\n2019\n84.0\n6.9\n1652\n\n\n2261\ntt9747450\ntvMovie\nHoliday for Heroes\nholiday for heroes\n2019\n81.0\n7.0\n1655\n\n\n2262\ntt9802890\ntvMovie\nChristmas Jars\nchristmas jars\n2019\n93.0\n7.3\n914\n\n\n2263\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n725\n\n\n2264\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n926\n\n\n\n\n2265 rows × 8 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nholiday_movies['num_votes'] = np.log(holiday_movies['num_votes'] + 1)\nholiday_movies['num_votes']\n\n\n\n\n\n\n\n\nnum_votes\n\n\n\n\n0\n4.025352\n\n\n1\n5.493061\n\n\n2\n6.459904\n\n\n3\n5.549076\n\n\n4\n6.608001\n\n\n...\n...\n\n\n2260\n7.410347\n\n\n2261\n7.412160\n\n\n2262\n6.818924\n\n\n2263\n6.587550\n\n\n2264\n6.831954\n\n\n\n\n2265 rows × 1 columns\ndtype: float64\n\n\n\nholiday_genres_movies = pd.merge(holiday_movies, holiday_movie_genres, on='tconst')\nholiday_genres_movies\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\nlog_num_votes\ngenres\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n4.025352\n4.025352\nComedy\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n5.493061\n5.493061\nDrama\n\n\n2\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n5.493061\n5.493061\nRomance\n\n\n3\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n6.459904\n6.459904\nComedy\n\n\n4\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n6.459904\n6.459904\nDrama\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4526\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n6.587550\n6.587550\nFamily\n\n\n4527\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n6.587550\n6.587550\nRomance\n\n\n4528\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nComedy\n\n\n4529\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nDrama\n\n\n4530\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nRomance\n\n\n\n\n4531 rows × 10 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\ntop_5_genres = holiday_genres_movies['genres'].value_counts().head(5)\ntop_5_genres\n\n\n\n\n\n\n\n\ncount\n\n\ngenres\n\n\n\n\n\nComedy\n1025\n\n\nDrama\n828\n\n\nRomance\n737\n\n\nFamily\n707\n\n\nAnimation\n268\n\n\n\n\ndtype: int64\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ntop_5_genres = (holiday_genres_movies['genres']\n                .value_counts()\n                .nlargest(5)\n                .index)\ntop_5_genres\n\nIndex(['Comedy', 'Drama', 'Romance', 'Family', 'Animation'], dtype='object', name='genres')\n\n\n\nfiltered_data = holiday_genres_movies[holiday_genres_movies['genres'].isin(top_5_genres)]\nfiltered_data\n\n\n  \n    \n\n\n\n\n\n\ntconst\ntitle_type\nprimary_title\nsimple_title\nyear\nruntime_minutes\naverage_rating\nnum_votes\nlog_num_votes\ngenres\ntop_5_genres\n\n\n\n\n0\ntt0020356\nmovie\nSailor's Holiday\nsailors holiday\n1929\n58.0\n5.4\n4.025352\n4.025352\nComedy\nNaN\n\n\n1\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n5.493061\n5.493061\nDrama\nNaN\n\n\n2\ntt0020823\nmovie\nThe Devil's Holiday\nthe devils holiday\n1930\n80.0\n6.0\n5.493061\n5.493061\nRomance\nNaN\n\n\n3\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n6.459904\n6.459904\nComedy\nNaN\n\n\n4\ntt0020985\nmovie\nHoliday\nholiday\n1930\n91.0\n6.3\n6.459904\n6.459904\nDrama\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4526\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n6.587550\n6.587550\nFamily\nNaN\n\n\n4527\ntt9815084\ntvMovie\nA Very British Christmas\na very british christmas\n2019\n90.0\n5.7\n6.587550\n6.587550\nRomance\nNaN\n\n\n4528\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nComedy\nNaN\n\n\n4529\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nDrama\nNaN\n\n\n4530\ntt9892854\ntvMovie\n#Xmas\nxmas\n2022\n84.0\n5.8\n6.831954\n6.831954\nRomance\nNaN\n\n\n\n\n3565 rows × 11 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\n\n\nsns.scatterplot(data = filtered_data,\n                x = 'num_votes',\n                y = 'average_rating',\n                style='title_type',\n                hue='genres'\n)\nplt.title('Relationship Between Log of Num Votes and Average Rating, by Genre')\n\nText(0.5, 1.0, 'Relationship Between Log of Num Votes and Average Rating, by Genre')\n\n\n\n\n\n\n\n\n\nThe relationship between num_votes and average_rating seems is shown on this scatter plot. It seems like romance tv movies are in the middle of num_votes and average_rating. While the other genres seem like there is not much of a pattern."
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Malene Comeau",
    "section": "",
    "text": "Malene Comeau majors in Data Analytics at SUNY Geneseo. When not working on data analytics, Malene enjoys spending time horse back riding and spending time in the outdoors."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Malene Comeau",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2023 - May 2027"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Malene Comeau",
    "section": "Experience",
    "text": "Experience\nTractor Supply Co | Cashier | June 2024 - Aug 2024  Little Red Schoolhouse | Teacher | June 2023 - Aug 2023  M&T Bank | Intern | July 2022 - Aug 2022"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nMalene_Comeau\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nHoliday Movies\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nMalene_Comeau\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nMalene Comeau\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  }
]